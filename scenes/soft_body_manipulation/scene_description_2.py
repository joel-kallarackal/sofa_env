# File generated by the SOFA-Godot plugin on 2024-04-21 18:30:06.
import Sofa
import Sofa.Core
from sofa_env.sofa_templates.scene_header import add_scene_header
from sofa_env.sofa_templates.deformable import DeformableObject
from functools import partial
from sofa_env.sofa_templates.solver import add_solver
from sofa_env.sofa_templates.collision import add_collision_model
from sofa_env.sofa_templates.collision import CollisionModelType
from sofa_env.sofa_templates.visual import add_visual_model
from sofa_env.sofa_templates.camera import Camera
from sofa_env.sofa_templates.scene_header import SCENE_HEADER_PLUGIN_LIST
from sofa_env.sofa_templates.deformable import DEFORMABLE_PLUGIN_LIST
from sofa_env.sofa_templates.camera import CAMERA_PLUGIN_LIST

from sofa_env.sofa_templates.collision import COLLISION_PLUGIN_LIST, add_collision_model, CollisionModelType
from sofa_env.sofa_templates.deformable import DEFORMABLE_PLUGIN_LIST, DeformableObject
from sofa_env.sofa_templates.loader import add_loader
from sofa_env.sofa_templates.materials import MATERIALS_PLUGIN_LIST, Material
from sofa_env.sofa_templates.motion_restriction import MOTION_RESTRICTION_PLUGIN_LIST, add_bounding_box, add_rest_shape_spring_force_field_to_indices
from sofa_env.sofa_templates.scene_header import AnimationLoopType, SCENE_HEADER_PLUGIN_LIST

from sofa_env.sofa_templates.solver import SOLVER_PLUGIN_LIST, ConstraintCorrectionType
from sofa_env.sofa_templates.topology import TOPOLOGY_PLUGIN_LIST, TopologyTypes
from sofa_env.sofa_templates.visual import VISUAL_PLUGIN_LIST, add_visual_model

PLUGINS = (
    [
        "SofaGeneralEngine",
        "Sofa.Component.MechanicalLoad",
    ]
    + DEFORMABLE_PLUGIN_LIST
    + MATERIALS_PLUGIN_LIST
    + VISUAL_PLUGIN_LIST
    + TOPOLOGY_PLUGIN_LIST
    + MOTION_RESTRICTION_PLUGIN_LIST
    + COLLISION_PLUGIN_LIST
    + SOLVER_PLUGIN_LIST
    + SCENE_HEADER_PLUGIN_LIST
    + CAMERA_PLUGIN_LIST
)

def createScene(root_node: Sofa.Core.Node):
	scene_description = {"root_node": root_node}

	# add_scene_header
	add_scene_header(
		root_node=root_node,
		plugin_list=PLUGINS,
		gravity=(0, 0, -9.8),
		collision_detection_method_kwargs={
			"alarmDistance": 1,
			"contactDistance": 0.5
		}
	)

	# deformable_object
	deformable_object = DeformableObject(
		parent_node=root_node,
		name="intestine",
		volume_mesh_path="/home/saketh/godot_projects/project_1/meshes/Large_Intestine.msh",
		total_mass=10,
		visual_mesh_path="/home/saketh/godot_projects/project_1/meshes/Large_Intestine.stl",
		collision_mesh_path="/home/saketh/godot_projects/project_1/meshes/Large_Intestine.stl",
		add_solver_func=add_solver,
		add_collision_model_func=partial(add_collision_model,
			model_types=[CollisionModelType.POINT, CollisionModelType.TRIANGLE],
			collision_group=8,
			contact_stiffness=100
		),
		add_visual_model_func=partial(add_visual_model,
			color=(0.682353, 0.066667, 0.137255)
		)
	)
	scene_description["deformable_object"] = deformable_object

	# camera
	camera = Camera(
		root_node=root_node,
		placement_kwargs={
			"position": (197.395004, 94.978996, 171.175995),
			"lookAt": (0.517679, 0.139173, 0.84418),
			"zoomSpeed": 20,
			"panSpeed": 0.1,
			"pivot": 3
		},
		vertical_field_of_view=45,
		z_near=0.05,
		z_far=350,
		width_viewport=480,
		height_viewport=480
	)
	scene_description["camera"] = camera

	# SofaDirectionalLight
	root_node.addObject(
		"DirectionalLight",
		name="SofaDirectionalLight",
		color=(1, 1, 1, 1),
		direction=(0, 0, 1)
	)

	return scene_description
